program estudiantes;

type
	tpNodo = ^tNodo;
	tNodo = record
		nombre:string;
		id,edad:integer;
		promedio:real;
		sig:tpNodo;
	end;
	
const
	ruta1 = 'C:\Users\Usuario\Desktop\ucalp1\Algo2\tplistas\listaTP2.txt';
	ruta2 = 'C:\Users\Usuario\Desktop\ucalp1\Algo2\tplistas\listaTP2b.txt';
	
var
	lista:tpNodo;
	vNombre,op:string;
	vId,vEdad:integer;
	vPromedio:real;



procedure crearLista(var l:tpNodo);

begin
	l:=nil;
end;



function primero(l:tpNodo):tpNodo;
	
begin
	primero:=l;
end;



function siguiente(l,p:tpNodo):tpNodo;
	
begin
	siguiente:=p^.sig;
end;



function anterior(l,p:tpNodo):tpNodo;

{
* Esta funcion recibe un puntero 'p' y ubica la posicion anterior a el.
* Hace que 'aux' apunte al primero de la lista, y despues mientras
* 'aux' no sea nil, y el siguiente de aux no sea 'p', a 'aux' lo hace 
* apuntar al siguiente. Cuando el siguiente de 'aux' es 'p', no entra
* al while y la funcion devuelve 'aux' que habia quedado apuntando
* al anterior de 'p'.
}

var
	aux:tpNodo;

begin
	aux:=primero(l);
	while (aux <> nil) and (siguiente(l,aux) <> p) do
	begin
		aux:=siguiente(l,aux);
	end;
	anterior:=aux;
end;		



function ultimo(l:tpNodo):tpNodo;

{
* Esta funcion usa un puntero 'aux' para recorrer la lista. Primero hace
* que 'aux' apunte al primero de la lista, y des√πes mientras el siguiente
* de 'aux' no sea nil, hace que 'aux' apunte al siguiente. Cuando el 
* siguiente de 'aux' es nil, no entra al while y la funcion devuelve
* 'aux', que habia quedado apuntando al ultimo nodo de la lista.
}

var
	aux:tpNodo;
	
begin
	aux:=primero(l);
	while siguiente(l,aux) <> nil do
	begin
		aux:=siguiente(l,aux);
	end;
	ultimo:=aux;
end;



function datoNombre(l,p:tpNodo):string;

begin
	datoNombre:=p^.nombre;
end;



function datoId(l,p:tpNodo):integer;

begin
	datoId:=p^.id;
end;



function datoEdad(l,p:tpNodo):integer;

begin
	datoEdad:=p^.edad;
end;



function datoPromedio(l,p:tpNodo):real;

begin
	datoPromedio:=p^.promedio;
end;



function buscarPorId(l:tpNodo;i:integer):tpNodo;

var
	aux:tpNodo;

begin
	aux:=primero(l);
	while (aux <> nil) and (datoId(l,aux) <> i) do
	begin
		aux:=siguiente(l,aux);
	end;
	buscarPorId:=aux;
end;



function idRepetida(l:tpNodo;i:integer):boolean;

begin
	idRepetida:=false;
	if buscarPorId(l,i) <> nil then
	begin
		idRepetida:=true;
	end;
end;	



procedure crearNodo(var p:tpNodo;n:string;i,ed:integer;pr:real);

begin
	new(p);
	p^.nombre:=n;
	p^.id:=i;
	p^.edad:=ed;
	p^.promedio:=pr;
	p^.sig:=nil;	
end;



procedure insertar(var l:tpNodo;n:string;i,ed:integer;pr:real);

{
* Este procedimiento pasa un puntero 'p' y los datos que queremos meter
* en el nuevo nodo al procedimiento crearNodo. Despues, si la lista esta
* vacia (l= nil), hace que l, el puntero cabecera, apunte a la misma 
* direccion que p, o sea al nodo que acabamos de crear. Si la lista no 
* esta vacia, a un puntero auxiliar 'aux' lo hace apuntar al ultimo de la 
* lista, y despues hace que auxiliar que apunta a siguiente apunte a 'p'
* o sea que va a apuntar al nodo que acabamos de crear. Es decir 'aux' 
* ahora es el penultimo y 'p' pasa a ser el nuevo ultimo, o sea que el 
* procedimiento inserta los nodos al final de la lista.
}

var
	p,aux:tpNodo;
	
begin
	crearNodo(p,n,i,ed,pr);
	if l = nil then
	begin
		l:=p;
	end
	else
	begin
		aux:=ultimo(l);
		aux^.sig:=p;
	end;
end;	



procedure eliminar(var l:tpNodo;p:tpNodo);

{
* Este procedimiento recibe la lista y un puntero 'p' que queremos eliminar.
* Si 'p' es el primero de la lista, hace que el puntero cabecera 'l' apunte
* al siguiente de 'p', o sea al segundo, y despues borra a 'p' (es decir
* que el segundo pasa a ser el primero). Si 'p' no es el primero, a un
* puntero auxiliar 'aux' lo hace apuntar al anterior de 'p', y despues
* hace que auxiliar que apunta a siguiente apunte al siguiente de 'p',
* o sea que el anterior de 'p' se saltea a 'p' y apunta a su siguiente.
* Despues 'p' se borra.
}

var
	aux:tpNodo;

begin
	if p = primero(l) then
	begin
		l:=siguiente(l,p);
		dispose(p);
	end
	else
	begin
		aux:=anterior(l,p);
		aux^.sig:=siguiente(l,p);
		dispose(p);
	end;
end;



procedure leer(ruta1:string;var l:tpNodo);

var
	archivo:text;
	sNombre:string;
	iId,iEdad:integer;
	iProm:real;

begin
	assign(archivo,ruta1);
	reset(archivo);
	while not eof(archivo) do
	begin
		readln(archivo,sNombre);
		readln(archivo,iId);
		readln(archivo,iEdad);
		readln(archivo,iProm);
		insertar(lista,sNombre,iId,iEdad,iProm);
	end;
	close(archivo);
end;



procedure mostrar(l:tpNodo);

var
	p:tpNodo;

begin
	p:=primero(l);
	while p <> nil do
	begin
		write('nombre:',datoNombre(l,p),' ');
		write('id:',datoId(l,p),' ');
		write('edad:',datoEdad(l,p),' ');
		writeln('promedio:',datoPromedio(l,p):0:1);
		writeln;
		p:=siguiente(l,p);
	end;
	writeln;
end;



function calcularProm(l:tpNodo):real;

var
	p:tpNodo;
	total:integer;
	suma:real;

begin
	suma:=0;
	total:=0;
	p:=primero(l);
	while p <> nil do
	begin
		suma:=suma+datoPromedio(l,p);
		total:=total+1;
		p:=siguiente(l,p);
	end;
	calcularProm:=suma/total;
end;



procedure guardar(ruta2:string;l:tpNodo);

var
	p:tpNodo;
	archivo:text;

begin
	assign(archivo,ruta2);
	rewrite(archivo);
	p:=primero(l);
	while p <> nil do
	begin
		writeln(archivo,datoNombre(l,p));
		writeln(archivo,datoId(l,p));
		writeln(archivo,datoEdad(l,p));
		writeln(archivo,datoPromedio(l,p):0:1);
		p:=siguiente(l,p);
	end;
	close(archivo);
end;



BEGIN
	crearLista(lista);
	leer(ruta1,lista);
	writeln('Seleccione una opcion:');
	writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
	readln(op);
	while op <> 's' do
	begin
		if op = 'm' then
		begin
			writeln;
			mostrar(lista);
			writeln;
			writeln('Seleccione una opcion:');
			writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
			readln(op);
		end
		else if op = 'a' then
		begin
			write('ingrese nombre:');
			readln(vNombre);
			write('ingrese id:');
			readln(vId);
			if not idRepetida(lista,vId) then
			begin
				write('ingrese edad:');
				readln(vEdad);
				write('ingrese promedio:');
				readln(vPromedio);
				insertar(lista,vNombre,vId,vEdad,vPromedio);
				writeln;
				mostrar(lista);
				writeln;
				writeln('Seleccione una opcion:');
				writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
				readln(op);
			end
			else
			begin
				writeln('el numero de identificacion ya esta en uso');
				writeln;
				writeln('Seleccione una opcion:');
				writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
				readln(op);
			end;	
		end
		else if op = 'p' then
		begin
			writeln('el promedio es:',calcularProm(lista):0:1);
			writeln;
			writeln('Seleccione una opcion:');
			writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
			readln(op);
		end
		else if op = 'e' then
		begin
			write('ingrese numero de id:');
			readln(vId);
			if idRepetida(lista,vId) then
			begin
				eliminar(lista,buscarPorId(lista,vId));
				writeln;
				mostrar(lista);
				writeln;
				writeln('Seleccione una opcion:');
				writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
				readln(op);
			end
			else
			begin
				writeln('no hay ningun estudiante con ese numero de identificacion');
				writeln;
				writeln('Seleccione una opcion:');
				writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
				readln(op);
			end;	
		end
		else if op = 'g' then
		begin
			guardar(ruta2,lista);
			writeln;
			writeln('Seleccione una opcion:');
			writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
			readln(op);
		end
		else
		begin
			writeln('seleccione una opcion valida');
			writeln('mostrar(m)/agregar(a)/promedio(p)/eliminar(e)/guardar(g)/salir(s)');
			readln(op);
		end;	
	end;
END.
